import React from 'react';
import merge from 'lodash.merge';

import StoreLink from './link';
import { StoreHistoryHandler, StoreNavigate } from './history';
import * as ajax from './ajax';

export const useStore: UseStoreType = (initState, data) => {
  const [_state, setState] = React.useState(() => initState);

  const state = React.useCallback(
    (...stateMapper) => {
      if (stateMapper.length === 1) {
        return _state[stateMapper[0]];
      }
      return stateMapper.map((element) => _state[element]);
    },
    [_state],
  );

  const mergeState = React.useCallback((stateUpdater) => {
    setState((prevState) => {
      let newState;
      if (typeof stateUpdater === 'function') {
        newState = stateUpdater(prevState);
      } else {
        newState = stateUpdater;
      }
      newState.id = prevState.id + 1;
      return merge({}, prevState, newState); // Deep merge
    });
  }, []);

  return React.useMemo(
    () => ({
      state,
      data,
      mergeState,
      ajax,
      navigate: StoreNavigate(mergeState, data),
      historyHandler: StoreHistoryHandler(mergeState, data),
      Link: StoreLink(mergeState, data),
    }),
    [state, data, mergeState],
  );
};

// Share global read-only data and UI state
const StoreContext = React.createContext<StoreType>(undefined);
export const Provider = StoreContext.Provider;
export default StoreContext;
