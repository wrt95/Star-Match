/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const WebpackChunkHash = require('webpack-chunk-hash');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = (env) => {
  const config = {
    devtool: env.dev ? 'inline-source-map' : false,
    resolve: {
      extensions: ['.ts', '.tsx', '.js', '.json'],
      modules: [path.resolve('./src'), path.resolve('./node_modules')],
      alias: {
        styles: path.resolve('./styles'),
      },
    },
    entry: {
      main: './src/renderers/client.tsx',
    },
    output: {
      path: path.resolve('public', 'bundles'),
      filename: env.dev ? '[name].js' : '[name].[chunkhash].js',
    },
    node: {
      fs: 'empty',
    },
    module: {
      rules: [
        {
          test: /\.tsx?$/,
          exclude: /node_modules/,
          use: {
            loader: 'ts-loader?configFile=tsconfig.fe.json',
          },
        },
        {
          test: /\.css$/,
          exclude: /node_modules/,
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: 'css-loader',
              options: {
                importLoaders: 1,
              },
            },
            {
              loader: 'postcss-loader',
            },
          ],
        },
      ],
    },
    optimization: {
      splitChunks: {
        cacheGroups: {
          commons: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendor',
            chunks: 'all',
          },
        },
      },
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: env.dev ? '[name].css' : '[name].[hash].css',
        chunkFilename: env.dev ? '[id].css' : '[id].[hash].css',
      }),
      new webpack.HashedModuleIdsPlugin(),
      new WebpackChunkHash(),
      function () {
        this.plugin('done', (stats) => {
          let gVars = {};
          try {
            gVars = require('./.reactful.json');
          } catch (err) {
            // do nothing
          }
          fs.writeFileSync(
            path.resolve('.reactful.json'),
            JSON.stringify(
              Object.assign({}, gVars, stats.toJson()['assetsByChunkName']),
              null,
              2,
            ),
          );
        });
      },
    ],
  };

  return config;
};
